[{"path":"https://naturewaves.github.io/Rthoptera/articles/Apps.html","id":"how-to-launch-an-app","dir":"Articles","previous_headings":"","what":"How to launch an app","title":"Launching Shiny Apps with Rthoptera","text":"Rthoptera, relevant functions come Shiny app companion. explore apps available, run: launch_app() function supports partial matching, means , example, want run import_wave app, can just type: Rthoptera launch import_wave app. However, apps longer similar names, need type characters. example, run: Rthoptera ask specify . pay attention list available apps, notice ‘temporal_stats’ apps ones ending ‘hq’ ‘lq’, run: Rthoptera understand trying launch_app(“temporal_stats_hq”). use launch_app() command:","code":"library(Rthoptera) launch_app() launch_app(\"import\") launch_app(\"temporal_stats\") launch_app('hq')"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"multi-software-manual-approaches","dir":"Articles","previous_headings":"","what":"Multi-software “manual” approaches","title":"Comparing Rthoptera with other workflows","text":"development Rthoptera, dissatisfied image output provided available bioacoustics software packages, authors used screenshots relevant views obtained closed-source software, mostly Adobe Audition (Adobe Inc., 2023). Obviously, conceived usage, screenshots need extensive manual refinements, require coordinated use closed-source software, usually include MS-Paint Adobe Photoshop. selection relevant portion audio file, bare minimum activities needed includes: Taking screenshot (.e., copying current screen content RAM image clipboard); Pasting screenshot image editing environment; Improving image clarity adjusting image levels (e.g., brightness, contrast, sharpness, etc.). post-production interventions needed may include image mode conversion (color black & white vice-versa) feature (e.g., grid lines) removal; Adding readable vertical horizontal axes, including tick marks, values labels: even though original screenshot may include information, -screen font size usually small readable. Furthermore, non-initial section audio file illustrated, -screen horizontal time scale start zero, complicates reading. reasons, suitably sized zeroed horizontal vertical scales need juxtaposed image, time-consuming process. Usually, Windows operating system, activity performed MS-Paint. average, obtaining image may require 10 20 minutes work (e.g., Brizio et al., 2021). raster images emerging process described sufficiently clear, drawbacks, including: Image content limited views available audio analysis software: usually, boils time/pressure envelopes, spectrograms mean spectra; Composite images (e.g. time/pressure envelopes different time scales, combination mean spectra spectrogram) obtained single step, require mosaic separately generated images; Images include data besides appearing image . data needed purpose publication, must obtained ways, typically manual transcription values read screen, often obtained suitably positioning mouse pointer, e.g. case reading pressure levels mean spectra (forgetting pixel-wise process pointer positioning inconsistent error-prone); Image style (e.g., color coding pressure levels) may vary one image another, depending software used screenshot generation. whole process described highly dependent skill, experience individual sensitivity operator, consistency results different operators fully granted. example Mean Power Spectrum extracted screenshot Adobe Audition post-processed Microsoft Paint Adobe Photoshop change color scale add new axes labels, requiring 10 minutes produce: plot type produced Rthoptera (using normalized amplitude instead dB FS), took 45 seconds produce, including selection file, changing scale parameters custom labels Y-axis, modifying output dimensions, typing species name call type.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"raven-pro-1-6","dir":"Articles","previous_headings":"Multi-software “manual” approaches","what":"Raven Pro 1.6","title":"Comparing Rthoptera with other workflows","text":"NOTE: comparison used machine Windows 11 Home, 64 bit, 16 GB RAM. Raven Pro 1.6 (Cornell Lab Ornithology, 2021) dedicated bioacoustics software build scientists. Even free version Raven Lite offers suite useful tools acoustic analysis, extensively used researchers acoustic communication birds, anurans, bats, mammals. One disadvantage software proprietary nature, limiting user’s ability customize plots forcing rely extra software obtain desired results. plot shown took 70 seconds make Raven Pro 1.6, including un-checking position marker (wrongly shown many scientific publications), adjusting zoom level oscillogram, window size contrast spectrogram, finally changing grey scale Microsoft Office, allow control output dimensions either: output nice, far customizable, user can’t control output parameters either (e.g., image dimensions). knowledge, plots Raven separate views, allowing add Mean Power Spectrum aligned side spectrogram. wanted achieve output “multi-plot” Rthoptera, manually paste spectral plot side, requiring manual adjustment dimensions likely distort axes labels. consider iterating process many recordings, translates tedious endeavor. Rthoptera, final output can obtained 10 seconds without extra manual processing. First, load Waves RthopteraSounds package: , launch app multi_plot app following call: can modify parameters computing plot: exported image: Note R, warbleR package also allows extract spectral statistics automatically, requires importing selection tables Raven, makes process longer.","code":"library(Rthoptera)  # Load the sample recordings library(RthopteraSounds) data(\"coryphoda\")  data(\"tettigonia\") data(\"gryllus\") launch_app(\"multi_plot\")"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"rthopteras-interactive-plots","dir":"Articles","previous_headings":"","what":"Rthoptera’s Interactive Plots","title":"Comparing Rthoptera with other workflows","text":"One main features package interactivity. Several functions apps produce interactive plots can saved HTML documents end users explore. examples obtain interactive plots using tettigonia Wave object RthopteraSounds: First, let’s make interactive oscillogram oscillogram_plotly function:  ancillary interactive spectrogram can obtained spectrogram_plotly() function. Note interactive spectrogram added mainly aid preprocessing (band-pass filtering) intended illustrating signal professional way (hence blueprint style): interactive Power Spectrum can obtained spectrum_plotly() function. plot shows black linear scale spectrum top grey dB scale spectrum:","code":"data(\"tettigonia\") # Interactive oscillogram (aka waveform) oscillogram_plotly(tettigonia) # Interactive spectrogram (aka sonogram) spectrogram_plotly(tettigonia) # Interactive mean power spectrum (aka PSD) spectrum_plotly(tettigonia)$plot"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"rthopteras-temporal-metrics","dir":"Articles","previous_headings":"","what":"Rthoptera’s Temporal Metrics","title":"Comparing Rthoptera with other workflows","text":"importing preprocessing apps added just make life easier, core Rthoptera’s contribution insect biacoustics automatic detection characterization temporal units. playing around parameters, can specify measure, Rthoptera rest. available tools automatic measurement acoustic signals based simple amplitude threshold separate signal background noise. approach enough measure high-SNR recordings tonal calls, produced ground-, tree-, field-crickets. However, want measure broadband stridulations produced katydids bush-crickets, things consider. broadband calls characterized transient-like “clicks”, often reflecting individual impacts stridulatory teeth scraper. neutral nomenclature, call sounds ‘peaks’. Researchers often interested measuring number peaks ‘pulse’ (.e., continuous train waves) , call , ‘train’. problem arises peaks faint measure threshold approach, falling threshold want filter reverberations signal. Rthoptera solves detecting local peaks user-defined parameters. call_stats_lq() function creates following outputs: • interactive plot showing individual peaks, trains, motifs, well reporting summary statistics main measurements. • tabular dataset including: peak, train, motif measurements, summary table another table parameters used analysis. temporal measurements based peak detections. can use Plotly’s tools zoom-explore peak detections, especially fainter train. Note ‘Summary Statistics’ panel can toggled clicking text legend. train detection, spectral statistics calculated. can accessed train_data table:  can download interactive plots using “Export” menu Rstudio viewer pane:  Now let’s inspect results output tables:   Coryphoda analysis perfect illustration Temporal Dynamic Excursion metrics call_stats_lq() function. used amplitude threshold approach, likely ignore first train, produced male opens tegmina (forewings). However, peak detection approach allows us capture faint sound packed information. Let’s focus “train_data” table: Fig. 12. Train Data table ‘results’ object. Note Temporal Excursion (“tem.exc” column) much higher first train, also longest (“train.dur” column), highest number peaks (“n.peaks” column), faintest (“mean.amp” column), flattest terms energy, lowest Dynamic Excursion (“dyn.exc” column). opposite true almost metrics last train (closing stroke); shortest, lowest number peaks, loudest, greatest change amplitude (Dynamic Excursion). want analyze tonal, “high-Q” songs, produced crickets, instead use call_stats_hq() function. example, use gryllus Wave RthopteraSounds. also add another level aggregation leaving motif_seq = TRUE (Default) arguments:","code":"# Using a low detection threshold results <- call_stats_lq(coryphoda,                           specimen_id = \"coralb_001\",                          detection_threshold = 0.01,                          motif_seq = FALSE) # Show the plot results$plot # Summary View(results$summary_data)  # Peaks View(results$peak_data)  # Trains View(results$train_data)  # Motifs View(results$motif_data)  # Parameters used View(results$params) # Use the call_stats_lq() function with a low detection threshold call_stats_hq(gryllus,                specimen_id = \"gryllus_001\") #optional  # Show the plot results$plot"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Comparing Rthoptera with other workflows","text":"Rthoptera capable improving efficiency effectiveness analysis insect signals: granting objective approach: user chooses parameter values, image plus data tables generation entirely consistently managed Rthoptera, excluding vagaries lengthy manual process impact different operators habits manual skills; granting advantage terms time required image generation: even though R RStudio especially suited bioacoustic analyses, worst-case scenario observed tests (100 seconds generation composite image Rthoptera) compares favorably 20 30 minutes required obtain comparable image screenshot-based process illustrated ; generating publication-ready plots, including composite illustrations (.e., “multiplot”) tedious time-consuming generate multi-software approach. simultaneously producing multiple tabular datasets diverse levels aggregation; providing new metrics (Pattern Complexity, Broadband Activity, Temporal Excursion, Dynamic Excursion, etc.) may set standard future investigations.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Compare.html","id":"references","dir":"Articles","previous_headings":"Conclusions","what":"References","title":"Comparing Rthoptera with other workflows","text":"Adobe Inc. (2023). Adobe Audition (Version 23.0) [Computer software]. Adobe. https://www.adobe.com/products/audition.html Brizio, C.; Buzzetti, F.M.; Pavan, G. Beyond audible: Wide band (0-125 kHz) field investigation Italian Orthoptera (Insecta) songs. Biodivers. J. 2020, 11, 443–496. https://doi.org/10.31396/Biodiv.Jour.2020.11.2.443.496. Cornell Lab Ornithology. (2021). Raven Pro: Interactive sound analysis software (Version 1.6) [Computer software]. https://ravensoundsoftware.com/","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Preprocess.html","id":"when-and-how-to-preprocess-your-recordings","dir":"Articles","previous_headings":"","what":"When and how to preprocess your recordings","title":"Preprocessing Audio with Rthoptera","text":"many reasons bioacousticians edit recordings analyzing . especially true working field recordings, non-target sounds may obscure analyses, often occupying frequencies signal interest. cases, field recordist used ultrasonic microphone high sampling rate (e.g., 128 kHz, 384 kHz) recorded insect happened sing well Nyquist frequency (half sampling rate). Sometimes insect doesn’t call often, forcing us monitor long periods silence without stopping recording. cases, might want preprocess recordings. Rthoptera offers interactive apps deal issues, minimizing need multiple software workflow. DISCLAIMER: R optimized rendering large amounts data plots. long sound files (> 1 min) recorded high sampling rates (> 48 kHz), might want subset dedicated audio software importing R, unless lot patience capable computer. popular free audio editor Audacity. guide, work example Wave objects included package. want work single file included data, can run, example: make song Tettigonia cantans available R environment. load , run : use recordings run allow select, name import sound files R objects class “Wave”. app uses readWave() function tuneR package. Now can use different apps preprocess Wave analysis, including trimming, filtering, downsampling. preprocessing apps Rthoptera produce blueprint-like plots remind users intended publication, instead aid decision-making edits. rule thumb, want analyze several snippets recording separately, first evaluate need filtering downsampling extracting cuts avoid repeating process . want analyze single snippet wave file, might want trim filtering, optimize processing time editing steps.","code":"# Uncheck the line below if you haven't installed RthopteraSounds #remotes::install_github(\"naturewaves/RthopteraSounds\") library(RthopteraSounds) data(\"tettigonia\") load_rthoptera_data() launch_app(\"import_wave\")"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Preprocess.html","id":"trim","dir":"Articles","previous_headings":"When and how to preprocess your recordings","what":"Trim","title":"Preprocessing Audio with Rthoptera","text":"app works tuneR’s extractWave() function, interactive option accurate selection snippets. trim Wave, run app, plot oscillogram, select portion want save, type name , save . can overwrite original Wave assigning name selection (effect outside R environment), assign new name create new Wave object.want save several snippets length, just drag first selection desired position assign new name saving.  downsampling band-passing examples, use included “platycleis” Wave, recording Platycleis grisea made Cesare Brizio Italy.","code":"launch_app(\"trim\")"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Preprocess.html","id":"downsample","dir":"Articles","previous_headings":"When and how to preprocess your recordings","what":"Downsample","title":"Preprocessing Audio with Rthoptera","text":"app based seewave’s resamp() function. think sampling rate used record insect unnecessarily high, use app verify downsample appropriate. design, minimum Nyquist allowed Rthoptera 48 kHz. two options 96 kHz, 125 kHz. crickets, 48 kHz Nyquist suffice, caution must applied. app launched, select Wave want analyze click “Plot”.Now can assess maximum frequency interest (MaxFOI) hovering Mean Power Spectrum. MaxFOI less half Nyquist (maximum visible frequency plot), can consider downsampling. Select closest available value MaxFOI click “Downsample”.","code":"launch_app(\"downsample\")"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Preprocess.html","id":"band-pass-filter","dir":"Articles","previous_headings":"When and how to preprocess your recordings","what":"Band-pass Filter","title":"Preprocessing Audio with Rthoptera","text":"app based seewave’s fir() (Finite Impulse Response Filter) function. believe recording low-frequency noise non-target (e.g., species) sounds, consider applying band-pass filter (BPF) bandpass_filter app. app allows verify presence non-target sound range, helping choose appropriate BPF. Mean Power Spectrum view used determine whether non-target sound noise -20dB threshold typically employed assess bandwidth signal interest (SOI). non-target sound detected, user choose proper combination high-pass filter low-pass filter values significantly attenuate sounds threshold, allowing accurate measure plot SOI. Although takes longer render, spectrogram view may necessary field recordings multiple species detected, allows visual discrimination SOI non-target signals inspecting temporal patterns, visible mean power spectrum.","code":"launch_app(\"bandpass_filter\")"},{"path":"https://naturewaves.github.io/Rthoptera/articles/Rthoptera.html","id":"introduction-to-rthoptera","dir":"Articles","previous_headings":"","what":"Introduction to Rthoptera","title":"Rthoptera","text":"Rthoptera R package provides interactive Shiny applications standard analysis insect sounds. package intended used high signal--noise recordings, helping researchers make standardized measurements plots support scientific description “acoustic types”. define “acoustic type” first description calling song species, accompanied high-quality recording ideally voucher specimen identifier collection deposited. convenience users, included functions pre-processing audio files, already available packages (e.g., tuneR, seewave), interactive (Shiny apps). plotting functions based seewave package, convenience presets automatic parameter selection (e.g., window length spectrograms) ensure clarity Wave regardless recording settings. plots also interactive versions can saved HTML documents.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Rthoptera.html","id":"preprocessing","dir":"Articles","previous_headings":"Introduction to Rthoptera","what":"Preprocessing","title":"Rthoptera","text":"Please visit Preprocess page guidance use tools. Import: Browse local data import audio files (WAV) Wave objects R. process, waveform centered zero rmoffset() function ensure accurate measurements. Downsample: required appropriate, can reduce sampling rate audio files. helps improve computing speed certain analyses plots without losing important sound features. Band-pass Filter: necessary, apply user-defined high-pass /low-pass filter eliminate noise non-target sounds audio recordings. Trim: Using interactive oscillogram, can visually select trim specific sections Wave object. trimmed sections can saved new Wave objects R environment analysis. Merge: Useful one needs concatenate several wave files together certain analyses.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Rthoptera.html","id":"analysis","dir":"Articles","previous_headings":"Introduction to Rthoptera","what":"Analysis","title":"Rthoptera","text":"preprocessing complete, users can launch analysis tools extract spectral temporal statistics audio files: Spectral Statistics: Automatically calculate spectral metrics based mean power spectrum Wave object. Temporal Statistics: Automatically extract temporal metrics audio recordings. includes identifying analyzing elements (“tooth impacts”), trains (syllables), echemes (groups syllables trills) insect sounds. Two apps available: call_stats_hq optimized work “tonal” (.e., “high-Q”) signals, produced crickets. creates envelope waveform measures duration trains (.e., “pulses”) gaps based user-defined detection threshold, aggregating motifs (.e., “echemes”) , optionally, motif sequences. call_stats_lq works better broadband calls usually produced katydids, bush-crickets, water-bugs, etc, including wide amplitude variability, threshold approach leave fainter sounds undetected poorly measured. main difference “hq” app granularity: app detects peak envelope, often corresponding single tooth impact, groups trains (e.g., “pulses”, “syllables”), motifs (e.g., “echemes”), motif sequences using user-defined thresholds.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Rthoptera.html","id":"plotting","dir":"Articles","previous_headings":"Introduction to Rthoptera","what":"Plotting","title":"Rthoptera","text":"Multi-Power Spectrum: interactive tool overlays multiple power spectrum plots selected oscillogram, allowing easy comparison visualization spectral features across different time intervals. selection assigned color (colorblind-safe) oscillogram mean spectrum plots. Spectrogram: Generate standard spectrograms, optionally alongside lateral mean power spectrum. combination allows visualize time-frequency representations overall spectral distribution. spectrogram window size automatically adjusted based sampling rate duration recording obtain standard frequency/time resolution trade-. Multi Plot: combined visualization spectrogram, mean spectrum, oscillogram, providing comprehensive view time-domain frequency-domain characteristics insect sounds. Oscillogram: Create standard oscillograms well interactive oscillograms allow zoom explore specific sections waveform. Multi-oscillogram: Create stacked oscillogram plot 0comparing sounds multiple species. particularly useful analyzing differences acoustic patterns species. Zoomed oscillogram: Create static oscillogram stacked zoomed portions selected interactively.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/articles/Summarize.html","id":"getting-summary-data-for-specific-trains-across-motifs","dir":"Articles","previous_headings":"","what":"Getting summary data for specific trains across motifs","title":"Summarizing Data with Rthoptera","text":"use call_stats functions extract temporal spectral statistics, summary output include summaries individual “train ids” number train per motif variable species. However, can easily summarize little code: example, work gryllus object RthopteraSounds package. loading data, run call_stats_hq function optimized tonal calls, storing output function local environment: Next, group train data “train.id”, summarize reframe() function dplyr package, calculating mean:","code":"# Load packages and data library(Rthoptera) library(RthopteraSounds) data(gryllus)  # Store the results in the R environment results <- call_stats_hq(gryllus) results$train_data |>    group_by(train.id) |> # group the trains by their identity within a motif   reframe(mean(peak.freq)) # get the mean per \"train.id\""},{"path":"https://naturewaves.github.io/Rthoptera/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Author1. Maintainer.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Author1, Author2, Author3 (2025). Rthoptera: Standardized Insect Bioacoustics. R package version 1.0.0, https://naturewaves.github.io/Rthoptera/, https://github.com/naturewaves/Rthoptera.","code":"@Manual{,   title = {Rthoptera: Standardized Insect Bioacoustics},   author = {{Author1} and {Author2} and {Author3}},   year = {2025},   note = {R package version 1.0.0, https://naturewaves.github.io/Rthoptera/},   url = {https://github.com/naturewaves/Rthoptera}, }"},{"path":"https://naturewaves.github.io/Rthoptera/index.html","id":"rthoptera","dir":"","previous_headings":"","what":"Standardized Insect Bioacoustics","title":"Standardized Insect Bioacoustics","text":"Rthoptera R package provides interactive Shiny applications standard analysis insect sounds. package intended used high signal--noise recordings, helping researchers make standardized measurements plots support scientific description “acoustic types”. define “acoustic type” first description calling song species, accompanied high-quality recording ideally voucher specimen identifier collection deposited. convenience users, included functions pre-processing audio files, already available packages (e.g., tuneR, seewave), interactive. plotting functions based seewave package, added benefit presets automatic parameter selection (e.g., window length spectrograms) ensure clarity recording. plots also interactive versions can saved HTML documents.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/index.html","id":"pre-processing","dir":"","previous_headings":"","what":"Pre-processing","title":"Standardized Insect Bioacoustics","text":"encourage new users see “Preprocessing” vignette guidance use tools. Import: Browse local data import audio files (WAV) Wave objects R. process, waveform centered zero rmoffset() function ensure accurate measurements. Downsample: required appropriate, can reduce sampling rate audio files. helps improve computing speed certain analyses plots without losing important sound features. Band-pass Filter: necessary, apply user-defined high-pass /low-pass filter eliminate noise non-target sounds audio recordings. Trim: Using interactive oscillogram, can visually select trim specific sections Wave object. trimmed sections can saved new Wave objects R environment analysis. Merge: Useful one needs concatenate several wave files together cetain analyses.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/index.html","id":"analysis","dir":"","previous_headings":"","what":"Analysis","title":"Standardized Insect Bioacoustics","text":"pre-processing complete, users can launch analysis tools extract spectral temporal statistics audio files: Spectral Statistics: Automatically calculate spectral metrics based mean power spectrum Wave object. Temporal Statistics: Automatically extract temporal metrics audio recordings. includes identifying analyzing elements (“tooth impacts”), trains (syllables), echemes (groups syllables trills) insect sounds. Two apps available: call_stats_hq optimized work “tonal” (.e., “high-Q”) signals, produced crickets. creates envelope waveform measures duration sounds gaps based user-defined detection threshold. call_stats_lq works better broadband calls usually produced katydids, bush-crickets, water-bugs, etc, including wide amplitude variability, threshold approach leave fainter sounds undetected poorly measured. app detects peak envelope, often corresponding single tooth impact, groups trains (e.g., “pulses”, “syllables”) motifs (e.g., “echemes”) user-defined thresholds.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/index.html","id":"plotting","dir":"","previous_headings":"","what":"Plotting","title":"Standardized Insect Bioacoustics","text":"Multi-Power Spectrum: interactive tool overlays multiple power spectrum plots selected oscillogram, allowing easy comparison visualization spectral features across different time intervals. selection assigned color (colorblind-safe) oscillogram mean spectrum plots. Spectrogram: Generate standard spectrograms, optionally alongside lateral mean power spectrum. combination allows visualize time-frequency representations overall spectral distribution. spectrogram window size automatically adjusted based sampling rate duration recording obtain standard frequency/time resolution trade-. Multi Plot: combined visualization spectrogram, mean spectrum, oscillogram, providing comprehensive view time-domain frequency-domain characteristics insect sounds. Oscillogram: Create standard oscillograms well interactive oscillograms allow zoom explore specific sections waveform. Multi-oscillogram: Create stacked oscillogram plot comparing sounds multiple species. particularly useful analyzing differences acoustic patterns species. Zoomed oscillogram: Create static oscillogram stacked zoomed portions selected interactively.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Standardized Insect Bioacoustics","text":"install Rthoptera package, follow steps: Install remotes package haven’t already: Load remotes package: Install Rthoptera GitHub: Load Rthoptera package:","code":"install.packages(\"remotes\") library(remotes) remotes::install_github(\"naturewaves/Rthoptera\") library(Rthoptera)"},{"path":"https://naturewaves.github.io/Rthoptera/reference/broadband_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Broadband Activity Index — broadband_activity","title":"Broadband Activity Index — broadband_activity","text":"function processes audio signal detect broadband activity identifying 'clicks' based time-frame-wise (.e., column-wise) amplitude changes spectrogram. computes statistics related click height, variance, centroid frequency, can plot spectrogram detected clicks highlighted. Included package explore potential monitoring activity non-stridulating pests stored food wood. function obtains non-normalized spectrogram seewave's spectro() using row-wise noise reduction procedure transforms amplitude values decibels full-scale (dBFS).","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/broadband_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Broadband Activity Index — broadband_activity","text":"","code":"broadband_activity(   wave,   channel = \"left\",   hpf = 0,   rm.offset = TRUE,   freq.res = 50,   cutoff = -60,   click.length = 10,   difference = 10,   gap.allowance = 2,   spectrogram = FALSE,   dark.plot = FALSE,   plot.title = NULL,   verbose = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/broadband_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Broadband Activity Index — broadband_activity","text":"wave `Wave` object containing audio signal analyzed. channel Character. Wave stereo want use one channel, pass either \"left\" \"right\" argument. want analyze mix channels, select \"mix\". NULL (default), results returned channel. hpf Numeric. High-pass filter. default (500 Hz) used always consistency unless signals interest threshold. rm.offset Logical. DC offset removed audio signal? Defaults `TRUE`. freq.res Numeric. Frequency resolution Hz. value determines \"height\" frequency bin , therefore, window length used (sampling rate / frequency resolution). cutoff Numeric. amplitude threshold (dBFS) removing low-amplitude values spectrogram. Default `-50`. click.length Numeric. minimum length (frequency bins) detected click kept. Default `10`. difference Numeric. maximum difference amplitude adjacent frequency bins considered part single 'click'. Default `20`. gap.allowance Numeric. size gaps (frequency bins) allowed contiguous parts click. Default `2`. Gaps larger value split clicks. spectrogram Logical. spectrogram highlighted clicks plotted? Default `TRUE`. dark.plot Logical. plot use dark theme (black background)? Default `FALSE`. plot.title Character. title plot, `plot` `TRUE`. Default `NULL`. verbose Logical. TRUE, details dynamic range printed console.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/broadband_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Broadband Activity Index — broadband_activity","text":"tibble containing following columns:   - `index`: name index. Useful later merging data indices.   - `value`: number clicks detected recording.   - `mean`: mean click height (frequency bins).   - `variance`: variance click height.   - `sd`: standard deviation click height.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/broadband_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Broadband Activity Index — broadband_activity","text":"","code":"if (FALSE) { # \\dontrun{ library(RthopteraSounds) data(coryphoda) broadband_activity(coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_hq.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal and spectral statistics for HQ calls — call_stats_hq","title":"Temporal and spectral statistics for HQ calls — call_stats_hq","text":"function analyzes acoustic characteristics wave object detecting sounds threshold envelope created mean smoothing window, grouping motifs, computing various metrics related temporal spectral structure. interactive plot visualizes results, showing envelope signal, detected trains, motifs, key statistics. plot can downloaded HTML (interactive) PNG (static) file.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_hq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal and spectral statistics for HQ calls — call_stats_hq","text":"","code":"call_stats_hq(   wave,   specimen_id = \"\",   msmooth_window = 100,   msmooth_overlap = 50,   upper_detection_threshold = 0.2,   lower_detection_threshold = 0.1,   min_train_dur = 0.002,   max_train_gap = 0.08,   motif_seq = TRUE,   max_motif_gap = 0.8,   norm_env = TRUE,   db_threshold = 20 )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_hq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal and spectral statistics for HQ calls — call_stats_hq","text":"wave Wave object containing sound data. specimen_id character string representing specimen ID. msmooth_window integer specifying window size (milliseconds) smoothing envelope (default: 100). msmooth_overlap integer specifying overlap ( envelope. Default = 50. upper_detection_threshold numeric value representing upper amplitude detection threshold Default = 0.2. lower_detection_threshold numeric value representing lower amplitude detection threshold Default = 0.1. min_train_dur numeric value specifying minimum duration (seconds) valid amplitude train. Default = 0.002. max_train_gap numeric value representing maximum gap (seconds) allowed two trains considering part different motifs. Default = 0.08. motif_seq Logical. TRUE, add first-order aggregation motifs. Default value FALSE. max_motif_gap Numeric. Maximum allowed gap (seconds) motifs consider part sequence.  @param norm_env logical indicating whether normalize envelope  Default = TRUE.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_hq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal and spectral statistics for HQ calls — call_stats_hq","text":"list following components: plot interactive `plotly` plot showing signal envelope, detected trains, motifs. summary_data tibble summary statistics acoustic motifs. train_data tibble details detected trains. motif_data tibble details detected motifs. params tibble containing input parameters.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_hq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal and spectral statistics for HQ calls — call_stats_hq","text":"","code":"if (FALSE) { # \\dontrun{ data(gryllus) # result <- temporal_stats_hq(gryllus) # result$plot } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_lq.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","title":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","text":"function calculates temporal spectral statistics, identifying motifs trains waveform, detecting peaks, extracting spectral features peak frequency, low frequency, high frequency, bandwidth.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_lq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","text":"","code":"call_stats_lq(   wave,   specimen_id = \"\",   ssmooth = 100,   peakfinder_ws = 50,   peakfinder_threshold = 0.005,   max_peak_gap = 0.01,   max_train_gap = 0.5,   motif_seq = TRUE,   max_motif_gap = 0.8,   detection_threshold = 0.1,   norm_env = TRUE,   db_threshold = 20 )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_lq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","text":"wave `Wave` object. specimen_id character string representing identifier specimen (recording) analyzed. ssmooth Numeric. Smoothing window size (samples) amplitude envelope. peakfinder_ws Numeric. Window size (samples) peak detection algorithm. peakfinder_threshold Numeric. Amplitude threshold peak detection, proportion maximum amplitude. max_peak_gap Numeric. Maximum allowed gap (seconds) peaks consider part train. max_train_gap Numeric. Maximum allowed gap (seconds) trains consider part motif. motif_seq Logical. TRUE, add first-order aggregation motifs. Default = FALSE. max_motif_gap Numeric. Maximum allowed gap (seconds) motifs consider part group. detection_threshold Numeric. Minimum amplitude peak considered valid. norm_env Logical. Whether normalize amplitude envelope 0 1. Defaults `TRUE`. db_threshold Numeric. Decibel threshold peak amplitude calculating low high frequencies. Defaults 20 dB.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_lq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","text":"list containing following components: plot interactive `plotly` object showing waveform envelope,   detected peaks, trains, motifs. summary_data tibble summary statistics analyzed   waveform. motif_seq_data tibble summarizing motif sequences. produced   motif_seq = TRUE. motif_data tibble summarizing motifs, including motif duration,   train counts, spectral properties. train_data tibble detailing detected trains, including start   end times, durations, peak frequencies, bandwidths. peak_data tibble containing detected peaks, including times,   periods, amplitudes. params tibble summarizing input parameters function.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/call_stats_lq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal and spectral statistics of detected broadband calls. — call_stats_lq","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) # Perform analysis on the coryphoda sample results <- call_stats_lq(   wave = coryphoda,   specimen_id = \"Coryphoda_Sample\",   ssmooth = 100,   peakfinder_ws = 50,   peakfinder_threshold = 0.01,   max_train_gap = 0.5,   max_peak_gap = 0.05,   detection_threshold = 0.2,   norm_env = TRUE,   db_threshold = 20 ) results$plot } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":null,"dir":"Reference","previous_headings":"","what":"Denoise a Wave for temporal measurements — clean_wave","title":"Denoise a Wave for temporal measurements — clean_wave","text":"Denoise Wave temporal measurements","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Denoise a Wave for temporal measurements — clean_wave","text":"","code":"clean_wave(   wave,   filter = \"fir\",   min = NULL,   max = NULL,   gate = 0.05,   oscillo = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Denoise a Wave for temporal measurements — clean_wave","text":"wave Wave object. filter Character. Select bandpass filter. Options 'fir' (Finite Impulse Response);'bwf' (Butterworth); 'freq' (Frequency filter). min Numeric. minimum frequency bandpass filter. max Numeric. maximum frequency bandpass filter. gate Numeric (double). proportion maximum amplitude use threshold noise gate. values threshold clipped zero. oscillo Logical. TRUE (default), simple oscillogram output wave plotted.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Denoise a Wave for temporal measurements — clean_wave","text":"Wave object","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Denoise a Wave for temporal measurements — clean_wave","text":"function developed preprocessing step temporal measurements . conduct spectral analysis objects returned function.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/clean_wave.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Denoise a Wave for temporal measurements — clean_wave","text":"","code":"if (FALSE) { # \\dontrun{ library(RthopteraSounds) data(Coryphoda) clean_wave(Coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/launch_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Launch a Shiny App from the package — launch_app","title":"Launch a Shiny App from the package — launch_app","text":"Launch Shiny App package","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/launch_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Launch a Shiny App from the package — launch_app","text":"","code":"launch_app(app_name = NULL)"},{"path":"https://naturewaves.github.io/Rthoptera/reference/launch_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Launch a Shiny App from the package — launch_app","text":"app_name (partial full) name Shiny app. NULL, lists available apps.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/launch_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Launch a Shiny App from the package — launch_app","text":"Launches Shiny app lists available apps name provided","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/list_waves.html","id":null,"dir":"Reference","previous_headings":"","what":"List wave files in a directory — list_waves","title":"List wave files in a directory — list_waves","text":"List wave files directory","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/list_waves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List wave files in a directory — list_waves","text":"","code":"list_waves(folder = NULL)"},{"path":"https://naturewaves.github.io/Rthoptera/reference/list_waves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List wave files in a directory — list_waves","text":"folder Character. path folder WAV files stored.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/list_waves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List wave files in a directory — list_waves","text":"list wave files","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/list_waves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List wave files in a directory — list_waves","text":"","code":"if (FALSE) { # \\dontrun{ list_waves() } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/multiplot_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","title":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","text":"Multiplot including Spectrogram, Mean Power Spectrum, ","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/multiplot_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","text":"","code":"multiplot_ggplot(   wave,   cutoff = -35,   overlap = 95,   zeropad = 200,   scale_type = \"dB\",   heights = c(7, 3),   oscillo_label = \"\" )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/multiplot_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","text":"wave `Wave` object. sound data plotted. cutoff Numeric. Amplitude cutoff dB peak. Values cutoff visible spectrogram. Default -35 dB. overlap Numeric. Window overlap percentage spectrogram. Default 95. zeropad Numeric. Zero padding FFT spectrogram. Default 200. scale_type Character. Scale amplitude spectrogram, either \"dB\" \"Linear\". Default \"dB\". heights Numeric vector. relative heights spectrogram/mean spectrum plot oscillogram. Default `c(7,3)`. oscillo_label Character. title Y-axis oscillogram. Default empty string.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/multiplot_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","text":"plot aligned spectrogram, mean spectrum, oscillogram.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/multiplot_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiplot including Spectrogram, Mean Power Spectrum, and — multiplot_ggplot","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) multiplot_ggplot(coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Oscillogram with ggplot2 — oscillogram_ggplot","title":"Oscillogram with ggplot2 — oscillogram_ggplot","text":"Oscillogram ggplot2","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Oscillogram with ggplot2 — oscillogram_ggplot","text":"","code":"oscillogram_ggplot(   wave,   y_title = \"Relative Amplitude\",   x_title = \"\",   save = TRUE,   file_name = \"\",   show_x = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Oscillogram with ggplot2 — oscillogram_ggplot","text":"wave Wave object y_title Character. title Y-axis. x_title Character. title X-axis. save Logical. TRUE, plot saved working directory. Defaults FALSE. file_name Character. Name PNG file saved. suffix (\"_oscillogram\") added default. show_x Logical. TRUE (default), X-axis plotted.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Oscillogram with ggplot2 — oscillogram_ggplot","text":"oscillogram plot. plot meant used plots matching X-axis, therefore lacks labels.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Oscillogram with ggplot2 — oscillogram_ggplot","text":"","code":"if (FALSE) { # \\dontrun{ oscillgoram_ggplot(coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Oscillogram — oscillogram_plotly","title":"Interactive Oscillogram — oscillogram_plotly","text":"function generates interactive oscillogram plot given Wave object using Plotly.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Oscillogram — oscillogram_plotly","text":"","code":"oscillogram_plotly(wave, title = \"\", line_color = \"black\")"},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Oscillogram — oscillogram_plotly","text":"wave wave object containing audio data plotted. title string specifying title plot. Default empty string. line_color string specifying color waveform line. Default 'black'.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Oscillogram — oscillogram_plotly","text":"Plotly object representing interactive oscillogram.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/oscillogram_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive Oscillogram — oscillogram_plotly","text":"","code":"if (FALSE) { # \\dontrun{ oscillogram_plotly(coryphoda_wave, title = \"Coryphoda albidicollis\") } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/Rthoptera.html","id":null,"dir":"Reference","previous_headings":"","what":"Introduction to Rthoptera — Rthoptera","title":"Introduction to Rthoptera — Rthoptera","text":"Rthoptera package provides interactive Shiny applications standard analysis plotting insect sounds. package intended used high signal--noise (focalized) recordings, helping researchers make standardized measurements plots support scientific description \"acoustic types\" subsequent ethological taxonomic studies. define \"acoustic type\" first description calling song species, accompanied high-quality recording ideally voucher specimen identifier collection deposited. package includes functions pre-processing, spectral temporal analysis, well several interactive static visualizations. 1. PREPROCESSING developed interactive versions several common preprocessing tools borrowed packages (e.g., seewave, tuneR, etc.), allowing user monitor editing process real time commiting edits new Wave objects. encourage new users see \"Preprocessing\" vignette guidance. Import: Browse local data import audio files (WAV, WAC, MP3) Wave objects R using import_audio function bioacoustics package background. process, waveform automatically centered zero rmoffset() function seewave ensure accurate measurements. Downsample: required, can reduce sampling rate audio files. helps improve computing speed certain analyses plots without losing important sound features. help decide downsampling appropriate, interactive mean power spectrum shown. Band-pass Filter: necessary, apply user-defined high-pass /low-pass filter eliminate noise non-target sounds audio recordings. process can monitored interactive mean power spectrum. Trim: Using interactive oscillogram, can visually select trim specific sections Wave object. trimmed sections can saved new Wave objects R environment analysis. 2. ANALYSIS pre-processing complete, can use different analysis tools extract spectral temporal statistics interactively monitoringthe results find best set parameters recordings. kept separate apps functions different analyses, song_statistics function summarizes temporal spectral data simultaneously, expediting analysis. Spectral Statistics: Automatically calculate spectral metrics based mean power spectrum Wave object. statistics provide insights overall frequency domain audio signal. Temporal Statistics: Automatically extract temporal metrics audio recordings. includes identifying analyzing elements (\"tooth impacts\"), trains (syllables), echemes (groups syllables trills) insect sounds. Two apps available: temporal_stats_hq_app optimized work \"tonal\" (.e., \"high-Q\") signals, produced crickets. creates envelope waveform measures duration sounds gaps based user-defined detection threshold. temporal_stats_lq_app works better broadband calls wide amplitude variability, threshold approach leave fainter sounds undetected poorly measured. app detects peak envelope, often corresponding single tooth impact, groups trains echemes user-defined thresholds. Song Statistics: newer version automatically extract temporal spectral metrics detection within recording. combines two functions described probably one might want use. 3. PLOTTING Multi-Power Spectrum: interactive tool overlays multiple power spectrum plots selected oscillogram, allowing easy comparison visualization spectral features across different time intervals. selection assigned color-blind-safe color oscillogram mean spectrum plots. Spectrogram: Generate standard spectrograms, optionally alongside lateral mean power spectrum. combination allows visualize time-frequency representations overall spectral distribution. spectrogram window size automatically adjusted based sampling rate duration recording obtain standard frequency/time resolution trade-. Multi Plot: combined visualization spectrogram, mean spectrum, oscillogram, providing comprehensive view time-domain frequency-domain characteristics insect sounds. Oscillogram: Create standard oscillograms well interactive oscillograms allow zoom explore specific sections waveform. Multi-oscillogram: Create stacked oscillogram plot comparing sounds multiple species. particularly useful analyzing differences acoustic patterns species. INSTALLATION install Rthoptera package, follow steps: Install remotes package already: install.packages(\"remotes\") Load remotes package: library(remotes) Install Rthoptera GitHub: remotes::install_github(\"naturewaves/Rthoptera\") Load Rthoptera package: library(Rthoptera)","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectral_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Spectral Statistics — spectral_stats","title":"Calculate Spectral Statistics — spectral_stats","text":"function calculates various spectral statistics complete Wave object, including peak frequency, bandwidth, spectral entropy, spectral flatness, spectral excursion, spectral energy. generates interactive plot frequency amplitude traces includes options visualize key statistics lines plot.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectral_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Spectral Statistics — spectral_stats","text":"","code":"spectral_stats(   wave,   specimen_id = \"\",   total_range = FALSE,   robust = FALSE,   db = TRUE,   cutoff = -20,   lines = TRUE,   sound_type = \"\",   temp = NULL,   hpf = 0 )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectral_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Spectral Statistics — spectral_stats","text":"wave `Wave` object representing sound data. specimen_id Character string specimen identifier. total_range Logical, whether calculate full frequency range. robust Logical, whether use robust frequency resolution (244 Hz). db Logical. TRUE, decibel scale used. FALSE (default), linear scale used. relative peak amplitude Wave. cutoff Numeric, threshold bandwidth calculation. db = FALSE, set 0 1. db = TRUE, set negative dB value. lines Logical, whether add lines min, max, peak frequencies. sound_type Character string type sound analyzed. temp Numeric, optional, temperature degrees Celsius. hpf Numeric, optional, high-pass filter cutoff frequency kHz. Defaults 0.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectral_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Spectral Statistics — spectral_stats","text":"list containing: - `data`: tibble calculated statistics. - `plot`: interactive `plotly` plot frequency amplitude traces.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectral_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Spectral Statistics — spectral_stats","text":"","code":"if (FALSE) { # \\dontrun{ wave <- readWave(\"example.wav\") result <- spectral_stats(wave) result$plot } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","title":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","text":"Standardized Spectrogram plus Mean Power Spectrum","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","text":"","code":"spectrogram_ggplot(   wave,   meanspec = TRUE,   widths = c(10, 1),   cutoff = -35,   scale_type = \"dB\",   overlap = 95,   zeropad = 200,   margin_l = 10,   margin_r = 0,   margin_t = 0,   margin_b = 10,   show_axis_titles = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","text":"wave `Wave` object `tuneR` package, representing audio signal analyzed. meanspec Logical. `TRUE`, mean power spectrum plotted alongside spectrogram. spectrum flipped positioned right. widths numeric vector length 2 specifying relative widths spectrogram mean power spectrum `meanspec = TRUE`. Defaults `c(10, 1)`. cutoff Numeric. amplitude cutoff dB relative peak amplitude. amplitude cutoff visible spectrogram. Defaults `-35`. scale_type Character. scale used amplitude. Either `\"dB\"` decibel scaling `\"Linear\"` linear amplitude scale. Defaults `\"dB\"`. overlap Numeric. percentage overlap successive windows spectrogram calculation. Defaults `95`. zeropad Numeric. number zero-padding points add window increase frequency resolution. Defaults `200`. margin_l Numeric. left margin (points) around plot. Defaults `10`. margin_r Numeric. right margin (points) around plot. Defaults `0`. margin_t Numeric. top margin (points) around plot. Defaults `0`. margin_b Numeric. bottom margin (points) around plot. Defaults `10`. show_axis_titles Logical. `TRUE`, axis titles time frequency displayed spectrogram. Defaults `TRUE`.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","text":"`ggplot2` object representing spectrogram, option include mean power spectrum right side.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardized Spectrogram plus Mean Power Spectrum — spectrogram_ggplot","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) # Create a spectrogram with a mean power spectrum for a wave object: spectrogram_ggplot(coryphoda, meanspec = TRUE, cutoff = -40, scale_type = \"dB\")  # Create a spectrogram without the mean power spectrum: spectrogram_ggplot(coryphoda, meanspec = FALSE) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","title":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","text":"Interactive Spectrogram Standardized Resolution","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","text":"","code":"spectrogram_plotly(   wave,   floor = -50,   background = \"#274C77\",   foreground = \"white\",   hover_bgcolor = \"white\",   hover_fontcolor = \"black\",   overlap = 50,   zero_padding = 0 )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","text":"wave Wave object. floor Background noise level, dB FS. background Background color. foreground Color plot lines spectral signatures. hover_bgcolor Color hover background. hover_fontcolor Color hover text. overlap FFT overlap. zero_padding Number zeroes added around signal improve frequency resolution.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","text":"interactive spectrogram.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrogram_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive Spectrogram with Standardized Resolution — spectrogram_plotly","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) spectrogram_plotly(coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectrum Table (Tibble, Data Frame) — spectrum_df","title":"Spectrum Table (Tibble, Data Frame) — spectrum_df","text":"function generates data frame containing frequency amplitude wave object using mean spectrum method. function leverages `meanspec` function `seewave` package compute spectrum.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectrum Table (Tibble, Data Frame) — spectrum_df","text":"","code":"spectrum_df(wave, freq_res = 10, fun = \"mean\", wn = \"hanning\")"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spectrum Table (Tibble, Data Frame) — spectrum_df","text":"wave object class `Wave` containing audio data analyzed. freq_res frequency resolution used frequency spectrum analysis. Use argument consistently standardized measurements across recordings different sampling rate. Default 10 Hz per frequency bin. fun Character string indicating summary function applied computing mean spectrum. Default `'mean'`. options include `'median'`, `'sd'` (standard deviation), `'var'` (variance). wn Window filtering function. Choices :  bartlett, blackman, flattop, hamming, hanning, rectangle. Default `hanning`.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spectrum Table (Tibble, Data Frame) — spectrum_df","text":"list two tibbles. first tibble \"spec_df\" two columns: `frequency` `amplitude`, second tibble \"params_df\" contains relevant parameters used create spectrum. `frequency` column contains frequencies Hertz (Hz), `amplitude` column contains corresponding amplitude values.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spectrum Table (Tibble, Data Frame) — spectrum_df","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming `wave` is a loaded Wave object spec_df <- meanspec_df(wave, from = 0, to = 5, wl = 1024, fun = 'mean') } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_ggplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Power Spectrum with ggplot2 — spectrum_ggplot","title":"Power Spectrum with ggplot2 — spectrum_ggplot","text":"function generates power spectrum plot using `ggplot2` based provided waveform object (`wave`). plot can display normalized amplitude values dB linear scales, includes options customizing display carrier frequency, bandwidth, spectral details.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_ggplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Power Spectrum with ggplot2 — spectrum_ggplot","text":"","code":"spectrum_ggplot(   wave,   auto_wl = TRUE,   wl = NULL,   ovlp = 75,   ymin = -100,   y_breaks = c(-40, -20, 0),   x_breaks = 6,   y_position = \"left\",   x_position = \"bottom\",   flip = FALSE,   color_db = \"#4d4d4d\",   color_linear = \"#000000\",   color_carrier = \"#1e90ff\",   color_threshold = \"#228b22\",   color_bandwidth = \"#228b22\",   fun = \"mean\",   wn = \"blackman\",   show_x_title = TRUE,   show_y_title = TRUE,   add_params = FALSE,   add_summary = TRUE,   plot_title = \"\",   italic_title = FALSE,   fmin = 0,   fmax = NULL,   linewidth = 1,   total_bandwidth = FALSE,   show_lines = FALSE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_ggplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Power Spectrum with ggplot2 — spectrum_ggplot","text":"wave Wave object (`tuneR` package), representing sound waveform. auto_wl Logical. `TRUE`, window length (`wl`) automatically calculated based sampling rate waveform. wl Numeric. Window length FFT. Ignored `auto_wl` `TRUE`. ovlp Numeric. Overlap windows percentage (0 100). Default 75. ymin Numeric. Minimum value y-axis (used plotting dB scale). y_breaks Numeric vector. Break points y-axis dB scale plot. x_breaks Integer. Number breaks x-axis (frequency). y_position Character. Position y-axis: \"left\" \"right\". x_position Character. Position x-axis: \"bottom\" \"top\". flip Logical. `TRUE`, flips x y axes. color_db Character. Color dB scale plot. color_linear Character. Color linear scale plot. color_carrier Character. Color carrier frequency line. color_threshold Character. Color threshold line. color_bandwidth Character. Color bandwidth lines. fun Character. Summary function calculating power spectrum, default \"mean\". wn Character. Windowing function FFT. Default \"blackman\". show_x_title Logical. `TRUE`, displays x-axis title. show_y_title Logical. `TRUE`, displays y-axis title. add_params Logical. `TRUE`, adds parameter information (window size, overlap, etc.) plot. add_summary Logical. `TRUE`, adds spectral summary statistics (entropy, flatness, carrier frequency, bandwidth) plot. plot_title Character. Title plot. italic_title Logical. `TRUE`, italicizes plot title. fmin Numeric. Minimum frequency display (kHz). fmax Numeric. Maximum frequency display (kHz). `NULL`, defaults half sampling rate (Nyquist frequency). linewidth Numeric. Line width carrier bandwidth lines. total_bandwidth Logical. `TRUE`, calculates total bandwidth using threshold 0.1. show_lines Logical. `TRUE`, displays lines carrier frequency bandwidth.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_ggplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Power Spectrum with ggplot2 — spectrum_ggplot","text":"`ggplot` object power spectrum plot.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_ggplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Power Spectrum with ggplot2 — spectrum_ggplot","text":"","code":"if (FALSE) { # \\dontrun{ spectrum_ggplot(coryphoda) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_plotly.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Spectrum Plot using Plotly — spectrum_plotly","title":"Interactive Spectrum Plot using Plotly — spectrum_plotly","text":"function generates interactive spectrum plot using Plotly, offering customizable options windowing, overlap, amplitude shading (dB linear), ability display summary statistics parameter annotations. function supports dB linear scales, bandwidth calculations, frequency markers.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_plotly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Spectrum Plot using Plotly — spectrum_plotly","text":"","code":"spectrum_plotly(   wave,   freq_res = 50,   db_shade = TRUE,   ovlp = 0,   fun = \"mean\",   wn = \"blackman\",   total_bandwidth = FALSE,   limit_indices = FALSE,   plot_title = \"\",   italic_title = TRUE,   fmin = 0,   fmax = NULL,   add_params = FALSE,   add_summary = FALSE,   x_breaks = 10,   y_position = \"left\",   x_position = \"bottom\",   show_x_title = TRUE,   show_y_title = TRUE,   color_db = \"grey\",   color_linear = \"black\",   color_carrier = \"white\",   color_threshold = \"white\",   color_bandwidth = \"white\",   show_lines = FALSE,   linewidth = 1 )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_plotly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Spectrum Plot using Plotly — spectrum_plotly","text":"wave wave object containing audio data. freq_res Numeric, frequency resolution Hz per bin. Default 50. db_shade Logical, whether shade plot based decibel amplitude. Default `TRUE`. ovlp Numeric, overlap successive windows percentage. Default 0 (overlap). fun Character, summary function apply spectrum, one \"mean\", \"median\", \"var\", \"sd\". Default \"mean\". wn Character, window type FFT, one \"hanning\", \"bartlett\", \"blackman\", \"flattop\", \"hamming\", \"rectangle\". Default \"hanning\". total_bandwidth Logical, whether calculate total bandwidth, ignoring gaps. Default `FALSE`. limit_indices Logical, whether limit spectrum indices frequency range `fmin` `fmax`. Default `FALSE`. plot_title Character, title plot. Default empty string. italic_title Logical, whether italicize plot title. Default `FALSE`. fmin Numeric, minimum frequency (kHz) plot. `NULL`, entire frequency range plotted. Default `NULL`. fmax Numeric, maximum frequency (kHz) plot. `NULL`, defaults Nyquist frequency. add_params Logical, whether add window parameters label plot. Default `FALSE`. add_summary Logical, whether add summary statistics label plot. Default `TRUE`. x_breaks Numeric, number breaks x-axis (frequency axis). Default 6. y_position Character, position y-axis, either \"left\" \"right\". Default \"left\". x_position Character, position x-axis, either \"top\" \"bottom\". Default \"bottom\". show_x_title Logical, whether show x-axis title. Default `TRUE`. show_y_title Logical, whether show y-axis title. Default `TRUE`. color_db Character, color dB amplitude plot. Default \"grey30\". color_linear Character, color linear amplitude plot. Default \"black\". color_carrier Character, color carrier frequency marker. Default \"white\". color_threshold Character, color threshold line. Default \"white\". color_bandwidth Character, color bandwidth lines. Default \"white\". show_lines Logical, whether show lines carrier frequency bandwidths. Default `FALSE`. linewidth Numeric, width lines plot. Default 1.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_plotly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Spectrum Plot using Plotly — spectrum_plotly","text":"list including: Plotly object, summary table (data frame).","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/spectrum_plotly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interactive Spectrum Plot using Plotly — spectrum_plotly","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: spectrum_plotly(Coryphoda_albidicollis, db_shade = FALSE, freq_res = 100, show_lines = TRUE) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_hq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","title":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","text":"function analyzes acoustic characteristics wave object detecting amplitude \"trains\" signal envelope, grouping motifs, computing various summary statistics metrics related train motif structure. interactive plot visualizes results, showing envelope signal, detected trains, motifs, key statistics. plot can downloaded HTML (interactive) PNG (static) file.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_hq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","text":"","code":"temporal_stats_hq(   wave,   specimen_id = \"\",   msmooth_window = 100,   msmooth_overlap = 50,   upper_detection_threshold = 0.2,   lower_detection_threshold = 0.1,   min_train_dur = 0.002,   max_train_gap = 0.08,   norm_env = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_hq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","text":"wave Wave object containing sound data. specimen_id character string representing specimen ID (default: \"\"). msmooth_window integer specifying window size (milliseconds) smoothing envelope (default: 100). msmooth_overlap integer specifying overlap (milliseconds) smoothing envelope (default: 50). upper_detection_threshold numeric value representing upper amplitude detection threshold (default: 0.2). lower_detection_threshold numeric value representing lower amplitude detection threshold (default: 0.1). min_train_dur numeric value specifying minimum duration (seconds) valid amplitude train (default: 0.002). max_train_gap numeric value representing maximum gap (seconds) allowed two trains considering part different motifs (default: 0.08). norm_env logical indicating whether normalize envelope (default: TRUE).","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_hq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","text":"list following components: plot interactive `plotly` plot showing signal envelope, detected trains, motifs. summary_data tibble summary statistics acoustic motifs. train_data tibble details detected trains. motif_data tibble details detected motifs. params tibble containing input parameters.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_hq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Temporal Statistics for HQ calls — temporal_stats_hq","text":"","code":"if (FALSE) { # \\dontrun{ data(gryllus) # result <- temporal_stats_hq(gryllus) # plot(result$plot) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"function calculates temporal statistics wave object, including peak detection, train detection, motif grouping. designed analyzing LQ acoustic signals, detecting peaks amplitude envelopes, measuring duration timing motifs trains waveform.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"","code":"temporal_stats_lq(   wave,   specimen_id = \"\",   ssmooth = 100,   peakfinder_ws = 50,   peakfinder_threshold = 0.005,   max_train_gap = 0.5,   max_peak_gap = 0.01,   detection_threshold = 0.01,   norm_env = TRUE )"},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"wave `Wave` object `tuneR` package representing acoustic signal. specimen_id character string representing identifier specimen (recording) analyzed. ssmooth Numeric value representing smoothing window size (samples) amplitude envelope. peakfinder_ws Numeric value specifying window size (samples) peak detection algorithm. peakfinder_threshold Numeric value specifying amplitude threshold peak detection, proportion maximum amplitude. max_train_gap Numeric value representing maximum allowed gap (seconds) peaks consider part train. max_peak_gap Numeric value representing maximum allowed gap (seconds) peaks consider part group. detection_threshold Numeric value specifying minimum amplitude peak considered valid. norm_env Logical value indicating whether normalize amplitude envelope 0 1. Defaults `TRUE`.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"list containing following: plot interactive plotly plot showing waveform envelope, detected peaks, trains, motifs. peak_data tibble containing detailed information detected peaks, including times periods. train_data tibble containing details detected trains, including start end times, durations, peak rates, gaps. motif_data tibble summarizing detected motifs, including motif duration, train counts, duty cycle. params tibble input parameters reference.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"New metrics provided function include Temporal Complexity Index (within motif), Temporal Excursion (within train), Dynamic Excursion (within train).","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/temporal_stats_lq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporal Statistics Function for Acoustic Analysis of LQ signals — temporal_stats_lq","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) # result <- temporal_stats_lq(coryphoda) # plot(result$plot) } # }"},{"path":"https://naturewaves.github.io/Rthoptera/reference/wave_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the waveform values as a table — wave_df","title":"Extract the waveform values as a table — wave_df","text":"Extract waveform values table","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/wave_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the waveform values as a table — wave_df","text":"","code":"wave_df(wave, norm = TRUE)"},{"path":"https://naturewaves.github.io/Rthoptera/reference/wave_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the waveform values as a table — wave_df","text":"wave Wave object. norm Logical. true, amplitude values rescaled range [-1,1].","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/wave_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the waveform values as a table — wave_df","text":"tibble data frame.","code":""},{"path":"https://naturewaves.github.io/Rthoptera/reference/wave_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the waveform values as a table — wave_df","text":"","code":"if (FALSE) { # \\dontrun{ data(coryphoda) wave_df(coryphoda) } # }"}]
